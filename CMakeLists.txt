cmake_minimum_required(VERSION 3.15)

enable_language(C CXX)

set(lib_name nlpp)

set(cmake_utils ${CMAKE_SOURCE_DIR}/cmake)
set(lib_path ${CMAKE_SOURCE_DIR}/${lib_name})
string(TOUPPER ${lib_name} lib_name_upper)

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)
include(${cmake_utils}/get_project_version.cmake)
include(${cmake_utils}/handle_dependency.cmake)

getProjectVersion(${lib_name}/helpers/config.hpp)

### Create the project with the given version
project(${lib_name} VERSION ${lib_full_version} LANGUAGES C CXX)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "" FORCE)
endif()


handleDependency(Eigen3 Eigen)
handleDependency(Handy handy)
handleDependency(Spectra spectra)
handleDependency(nanoflann nanoflann)


return()

### So we can install without building everything (docs, examples and tests)
# set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY TRUE)
# configure_file(nlpp/helpers/config.hpp.in test.hpp @ONLY)


## Options
option(${lib_name_upper}_EIGEN_INCLUDE_LOCAL "If Eigen will be included from a submodule" ON)
option(${lib_name_upper}_HANDY_INCLUDE_LOCAL "If Handy will be included from a submodule" ON)
option(${lib_name_upper}_SPECTRA_INCLUDE_LOCAL "If Spectra will be included from a submodule" ON)
option(${lib_name_upper}_USE_NANOFLANN "If Nanoflann will be used" ON)
option(${lib_name_upper}_NANOFLANN_INCLUDE_LOCAL "If Nanoflann will be included from a submodule" ON)

option(${lib_name_upper}_BUILD_CPP_LIB "If the C++ libraries will be generated by cmake" OFF)
option(${lib_name_upper}_BUILD_PYTHON_LIB "If the Python libraries will be generated by cmake" OFF)
option(${lib_name_upper}_BUILD_JS_LIB "If the JavaScript libraries will be generated by cmake" OFF)

option(${lib_name_upper}_BUILD_TESTS "If the unit test will be generated by cmake" OFF)
option(${lib_name_upper}_BUILD_EXAMPLES "If the examples will be generated by cmake" OFF)
option(${lib_name_upper}_BUILD_DOCS "If the docs will be generated by cmake" OFF)
option(${lib_name_upper}_BUILD_BENCH "If the docs will be generated by cmake" OFF)
###

add_subdirectory(${lib_path})

return()


###

if(${lib_name_upper}_BUILD_CPP_LIB)
    add_subdirectory(lib/cpp)
endif()

if(${lib_name_upper}_BUILD_PYTHON_LIB)
    if(NOT ${lib_name_upper}_BUILD_CPP_LIB)
        message(FATAL_ERROR "The C++ libs need to be built in order to build the Python libs")
    endif()

    add_subdirectory(lib/python)
endif()

if(${lib_name_upper}_BUILD_JS_LIB)
    if(NOT ${lib_name_upper}_BUILD_CPP_LIB)
        message(FATAL_ERROR "The C++ libs need to be built in order to build the JavaScript libs")
    endif()

    add_subdirectory(lib/js)
endif()

if(${lib_name_upper}_BUILD_TESTS)
    add_subdirectory(tests)

    # Workaround for the Spectra lib
    if(${EIGEN_INCLUDE_LOCAL})
        target_include_directories(tests PUBLIC ${PROJECT_SOURCE_DIR}/include/nlpp/external/Eigen)
    endif()
endif()

if(${lib_name_upper}_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

if(${lib_name_upper}_BUILD_DOCS)
    add_subdirectory(doc)
endif()

if(${lib_name_upper}_BUILD_BENCH)
    add_subdirectory(benchmark)
endif()

add_subdirectory(include/${lib_name})