cmake_minimum_required(VERSION 3.5)

set(lib_name nlpp)

string(TOUPPER ${lib_name} lib_name_upper)

### So we can install without building everything (docs, examples and tests)
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY TRUE)


### Get major.minor.patch semantic version
file(READ include/${lib_name}/Helpers/Config.h lib_name_config_file)

string(REGEX MATCH "define[ \t]+${lib_name_upper}_MAJOR_VERSION[ \t]+([0-9]+)" lib_name_major_version_match ${lib_name_config_file})
set(lib_name_major_version "${CMAKE_MATCH_1}")

string(REGEX MATCH "define[ \t]+${lib_name_upper}_MINOR_VERSION[ \t]+([0-9]+)" lib_name_minor_version_match ${lib_name_config_file})
set(lib_name_minor_version "${CMAKE_MATCH_1}")

string(REGEX MATCH "define[ \t]+${lib_name_upper}_PATCH_VERSION[ \t]+([0-9]+)" lib_name_patch_version_match ${lib_name_config_file})
set(lib_name_patch_version "${CMAKE_MATCH_1}")

set(lib_name_version ${lib_name_major_version}.${lib_name_minor_version}.${lib_name_patch_version})
###


### Create the project with the given version
project(${lib_name} VERSION ${lib_name_version} LANGUAGES CXX)


## Options
option(EIGEN_INCLUDE_LOCAL "If Eigen will be included from a submodule" OFF)
option(HANDY_INCLUDE_LOCAL "If Handy will be included from a submodule" ON)
option(SPECTRA_INCLUDE_LOCAL "If Spectra will be included from a submodule" ON)

if(${EIGEN_INCLUDE_LOCAL})
    set(_eigen_include_local 1)
else()
    set(_eigen_include_local 0)
endif()

if(${HANDY_INCLUDE_LOCAL})
    set(_handy_include_local 1)
else()
    set(_handy_include_local 0)
endif()

if(${SPECTRA_INCLUDE_LOCAL})
    set(_spectra_include_local 1)
else()
    set(_spectra_include_local 0)
endif()


option(${lib_name_upper}_BUILD_TESTS "If the unit test will be generated by cmake" ON)

option(${lib_name_upper}_BUILD_EXAMPLES "If the examples will be generated by cmake" OFF)

option(${lib_name_upper}_BUILD_DOCS "If the docs will be generated by cmake" OFF)

option(${lib_name_upper}_BUILD_BENCH "If the docs will be generated by cmake" OFF)
###



### Add library
add_library(${lib_name} INTERFACE)

target_compile_features(${lib_name} INTERFACE cxx_std_17)


target_include_directories(${lib_name} INTERFACE
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include/${lib_name}>
    $<INSTALL_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${lib_name}>
)

###

if(${lib_name_upper}_BUILD_TESTS)
    add_subdirectory(tests)

    # Workaround for the Spectra lib
    if(${EIGEN_INCLUDE_LOCAL})
        target_include_directories(tests PUBLIC ${PROJECT_SOURCE_DIR}/include/nlpp/external/Eigen)
    endif()
endif()

if(${lib_name_upper}_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

if(${lib_name_upper}_BUILD_DOCS)
    add_subdirectory(doc)
endif()

if(${lib_name_upper}_BUILD_BENCH)
    add_subdirectory(benchmark)
endif()

add_subdirectory(include/${lib_name})